C+------------------------------------------------------------------------------
C
      SUBROUTINE LUSOLVE (N, NDIM, A, B, IER)
C
C     ONE-LINER:  Square-system solution by LU decomposition
C
C     DESCRIPTION:
C
C        LUSOLVE solves the N*N system  A x = b  by Gaussian elimination
C     with partial pivoting.  The right-hand side  b  is overwritten by the
C     solution  x.  (Matrix  A  is also overwritten.)
C
C        For more than one right-hand side, use instead DECOMP (once) and
C     SOLVE once per RHS  b.  See also DECSLV for the single-right-hand-side
C     case:  it is slightly more efficient than LUSOLVE in its processing of
C     b  as column N+1 of the matrix, but may be less convenient.
C
C        LUSOLVE was adapted from DECSLV, itself a merger of the original
C     DECOMP and SOLVE (reference below).  Note that one version of DECOMP
C     and SOLVE provides an estimate of the matrix condition number, while
C     another version avoids this extra work for applications where cond (A)
C     of no interest.  All of these variations vary the first index in the
C     inner loops.
C
C     INPUT:
C        N   : Order of matrix  A;  N >= 2
C        NDIM: Row dim. of array  A  declared in the calling program
C        A   : N*N array containing matrix  A
C        B   : Right-hand-side N-vector  b
C
C     OUTPUT:
C        B   : Solution vector  x
C        IER : 0 means no problem was detected;
C              1 means  A  was found to be singular
C
C     REFERENCE:  Forsythe, Malcolm & Moler, 1972.
C
C     HISTORY:    07/09/93  DAS  Revision of DECSLV to avoid having to
C                                store b in an extra column of A.
C                                IER = 0 now means no error (as it should
C                                have from the start).
C
C     PROGRAMMING: David Saunders, Sterling Software/NASA Ames, Mt. View, CA
C
C-------------------------------------------------------------------------------

      IMPLICIT NONE

C     Arguments:

      INTEGER
     >   N, NDIM, IER
      REAL
     >   A (NDIM, N), B (N)

C     Local constants:

      REAL
     >   ONE, ZERO
      PARAMETER
     >  (ONE = 1.E+0, ZERO = 0.E+0)

C     Local variables:

      INTEGER
     >   I, J, K, M
      REAL
     >   T

C     Execution:

C     Perform the LU factorization, solving L y = b as we go:

      DO 60 K = 1, N - 1

C        Determine pivot element:

         M = K
         DO 20 I = K + 1, N
            IF (ABS (A (I, K)) .GT. ABS (A (M, K))) M = I
 20      CONTINUE

         T = A (M, K)
         A (M, K) = A (K, K)
         A (K, K) = T
         IF (T .EQ. ZERO) GO TO 90

C        Store the multipliers:

         T = -ONE / T
         DO 30 I = K + 1, N
            A (I, K) = A (I, K) * T
 30      CONTINUE

C        Apply the multipliers to current submatrix, including RHS:

         DO 50 J = K + 1, N
            T = A (M, J)
            A (M, J) = A (K, J)
            A (K, J) = T

            DO 40 I = K + 1, N
               A (I, J) = A (I, J) + A (I, K) * T
 40         CONTINUE

 50      CONTINUE

         T = B (M)
         B (M) = B (K)
         B (K) = T

         DO 55 I = K + 1, N
            B (I) = B (I) + A (I, K) * T
 55      CONTINUE

 60   CONTINUE

      IF (A (N, N) .EQ. ZERO) GO TO 90

C     Back substitution (solution of U x = y):

      DO 80 K = N, 2, -1
         T = B (K) / A (K, K)
         B (K) = T
         DO 70 I = 1, K - 1
            B (I) = B (I) - A (I, K) * T
 70      CONTINUE
 80   CONTINUE

      B (1) = B (1) / A (1, 1)
      IER = 0

      GO TO 99


 90   IER = 1  ! Matrix was singular

 99   RETURN
      END
