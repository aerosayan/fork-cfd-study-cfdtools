!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
      subroutine arcs2d (imin, imax, jmin, jmax, i1, i2, j1, j2, x,
     >                   u, v)
!
!     One-liner: Normalized arc-lengths for a surface subgrid stored as triples
!
!     ARCS2D calculates normalized arc-lengths for the indicated portion of a
!     regular 3-space surface grid stored as (x,y,z) triples. (PARAM2D separates
!     x, y, and z; ARCS3D doesn't quite work either.)
!
!     Degenerate lines are handled with uniform distributions.
!     Note that u and v are compatible with RIPPLE2D searching.
!
!     11/02/99  DAS  Surface-only variant of ARCS3D; handled degeneracies.
!     04/23/14   "   Recovered from a listing after a tar mix-up.
!
!     Author:  David Saunders, Raytheon/NASA Ames Research Center, CA
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      implicit none

!     Arguments:

      integer, intent (in) ::
     >   imin, imax, jmin, jmax,        ! Grid array dimensions
     >   i1, i2, j1, j2                 ! Active area

      real, intent (in) ::
     >   x(1:3,imin:imax,jmin:jmax)     ! Grid coordinates as triples

      real, intent (out) ::
     >   u(imin:imax,jmin:jmax),        ! Normalized arc-lengths
     >   v(imin:imax,jmin:jmax)         ! for the i & j lines:
                                        ! u(i1,j) = 0. = v(i,j1);
                                        ! u(i2,j) = 1. = v(i,j2)
!     Local constants:

      real, parameter ::
     >   eps = 1.e-6, one = 1.e+0, zero = 0.e+0

!     Local variables:

      integer ::
     >   i, j

      real ::
     >   rtotal

!     Local functions:

      real ::
     >   deli, delj

      deli(i,j) = sqrt ((x(1,i,j) - x(1,i-1,j))**2 +
     >                  (x(2,i,j) - x(2,i-1,j))**2 +
     >                  (x(3,i,j) - x(3,i-1,j))**2)

      delj(i,j) = sqrt ((x(1,i,j) - x(1,i,j-1))**2 +
     >                  (x(2,i,j) - x(2,i,j-1))**2 +
     >                  (x(3,i,j) - x(3,i,j-1))**2)

!     Execution:

!     Zero the two low-end edges:

      u(i1,j1:j2) = zero
      v(i1:i2,j1) = zero

!     Set up the low-end edge lines because they are missed by the
!     following loops over most of the interior:

      do i = i1 + 1, i2
         u(i,j1) = u(i-1,j1) + deli(i,j1)
      end do

      do j = j1 + 1, j2
         v(i1,j) = v(i1,j-1) + delj(i1,j)
      end do

!     Traverse the grid just once for the unnormalized arc lengths:

      do j = j1 + 1, j2
         do i = i1 + 1, i2
            u(i,j) = u(i-1,j) + deli(i,j)
            v(i,j) = v(i,j-1) + delj(i,j)
         end do
      end do

!     Normalize in each direction, handling possible degeneracies:

      do j = j1, j2
         rtotal = u(i2,j)

         if (rtotal > eps) then
            rtotal = one / rtotal
            do i = i1 + 1, i2 - 1
               u(i,j) = u(i,j) * rtotal
            end do
         else
            rtotal = one / real (i2 - i1)
            do i = i1 + 1, i2 - 1
               u(i,j) = real (i - i1) * rtotal
            end do
         end if

         u(i2,j) = one
      end do

      do i = i1, i2
         rtotal = v(i,j2)

         if (rtotal > eps) then
            rtotal = one / rtotal
            do j = j1 + 1, j2 - 1
               v(i,j) = v(i,j) * rtotal
            end do
         else
            rtotal = one / real (j2 - j1)
            do j = j1 + 1, j2 - 1
               v(i,j) = real (j - j1) * rtotal
            end do
         end if

         v(i,j2) = one
      end do

      end subroutine arcs2d
