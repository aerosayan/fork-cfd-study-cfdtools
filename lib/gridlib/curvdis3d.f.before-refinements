C+----------------------------------------------------------------------
C
      SUBROUTINE CURVDIS3D (NDAT, XDAT, YDAT, ZDAT, N, X, Y, Z,
     >                      EXPONENT, LUNOUT, WORK, ERRMSG, IER)
C
C     Acronym:  CURVature-based DIStribution: 3-Dimensional version
C               ----            ---           - -
C
C     Purpose:
C        CURVDIS3D redistributes points along a curve in 3-space which
C     is represented by a discrete dataset, not necessarily monotonic,
C     such that the local spacing is inversely proportional to the local
C     curvature (with adjustments to handle the zero curvature regions).
C     CURVDIS3D is intended for geometric applications where the coord-
C     inates have comparable units, although it may be used for non-
C     geometric purposes as well (e.g. plotting applications).  In both
C     cases, if the units of the curve coordinates are large (producing
C     small values of curvatures), the coordinates should be normalized
C     to the range [0,1].  For geometric curves, only one of the coord-
C     inates should be scaled to [0,1] and the others should be scaled
C     such that the true geometric shape is retained.
C
C
C     Method:
C        Given the availability of subroutine ARBDIS for translating
C     arbitrary "shape" functions into 1-D distributions whose spacing
C     at any abscissa is proportional to the shape function at that
C     abscissa, the problem then is to set up a shape function related
C     to curvature; ARBDIS does the rest.  (Abscissas in this case are
C     measures of arc length along the curve, and the shape function is
C     defined at each of the original data points.)
C        The subroutine is passed NDAT coordinates (XDAT, YDAT, ZDAT),
C     of the curve, and then uses PLFIT to compute the arc lengths (more
C     precisely the cumulative chord lengths), s (n).  Next, FD12K is
C     called thrice to compute the 2nd derivatives (d2x/ds2, d2y/ds2 and
C     d2z/ds2) in order to approximate the local curvatures' magnitudes,
C     k(s), which are given by:
C
C     (1)  k(s) = sqrt ((d2x/ds2) ** 2 + (d2y/ds2) ** 2 + (d2z/ds2) ** 2
C
C        A direct inverse proportionality would yield a shape function
C     with smaller spacings in regions of larger curvature.  However,
C     for straight segments of the curve where k(s) = 0., a simple
C     inverse proportionality such as shape(s) = 1./k(s) would produce
C     an infinite local spacing.  Therefore, some arbitrary constant
C     (say 1.) should be added to k(s) in the denominator.
C        Clustering may be controlled by raising this fraction to some
C     exponent in the range [0,1].  Zero would produce shape(s) = 1., or
C     uniform spacing; 1 would yield "direct" inverse proportionality
C     spacing; and an exponent in between (0,1) would produce spacings
C     between these two extremes.  Thus, our spacing function becomes:
C
C        (2)   shape(s) = [1./(k(s) + 1.)] ** exponent  
C  
C        After the relative spacings (defining the shape function) are
C     calculated from eqn. (2), ARBDIS is called to compute a corres-
C     ponding 1-D distribution in terms of (pseudo) arc lengths for the
C     requested N points.  PLEVAL then serves to evaluate the new X-Y-Z
C     coordinates corresponding to the new chord lengths.
C
C
C        Note:  WORK (*) is used/reused in the following sequence:
C
C     (1 : NDAT)                             Input curve chord lengths
C     (NDAT + 1 : 2 * NDAT)                  FP values for FD12K calls
C     (2 * NDAT + 1 : 3 * NDAT)              d2x / ds2 values
C     (3 * NDAT + 1 : 4 * NDAT)              d2y / ds2 values
C     (4 * NDAT + 1 : 5 * NDAT)              d2z / ds2 values
C     (NDAT + 1 : 2 * NDAT)                  xdat-ydat relative spacings
C                                            defining the shape function
C     (2 * NDAT + 1 : 2 * NDAT + N)          New curve chord lengths
C     (2 * NDAT + N + 1 : 5 * NDAT + 6 * N)  Workspace for ARBDIS
C
C
C     Procedures:
C        ARBDIS      Distributes points in an interval according to an
C                       arbitrary shape function
C        FD12K       Derivatives by finite differencing
C        CHORDS3D    Cumulative chord lengths along a curve
C        LCSFIT      Local cubic spline for the interpolations
C
C
C     Error Handling:
C        See IER description below.  It is the user's responsibility
C     to check IER on return from CURVDIS3D.  Argument ERRMSG returns
C     more information (e.g. in which CURVDIS3D failed) to the driving
C     program.
C
C
C     Environment:
C        Fortran 77 + minor extensions (IMPLICIT NONE & Trailing ! comments)
C
C     History:
C        08/12/88    D.A.Saunders   Initial design of CURVDIS (X-Y case)
C        09/09/88    B.A.Nishida    Initial implementation
C        12/20/88    M.D.Wong       Generalized to 3 dimensions (X-Y-Z)
C        02/15/96    DAS            Parametric cubic interpolation now,
C                                   instead of linear.
C
C     Authors:  David Saunders, Brian Nishida, Michael Wong
C               Sterling Software/NASA Ames Research Center, Mt. View, CA
C
C ----------------------------------------------------------------------


      IMPLICIT NONE

C     Arguments:
C     ----------

      CHARACTER*50 ERRMSG ! (O)  Error message
      INTEGER  IER        ! (O)  Error flag
                          !         IER = 0: No errors
                          !         IER = 1: EXPONENT is out of range
                          !         IER = 2: Failure in ARBDIS
      INTEGER  LUNOUT     ! (I)  Logical unit for displaying convergence
                          !         history.  LUNOUT < 0 suppresses it.
      INTEGER  N          ! (I)  Number of output curve points
      INTEGER  NDAT       ! (I)  Number of input curve points
      REAL  EXPONENT      ! (I)  Exponent for spacing function; controls
                          !         the point clustering.  EXPONENT must
                          !         be in the range [0.,1.] where 0.
                          !         produces uniform spacing, and 1.
                          !         maximumizes clustering effect.
      REAL  XDAT (NDAT)   ! (I)  X coordinates of input curve
      REAL  YDAT (NDAT)   ! (I)  Y coordinates of input curve
      REAL  ZDAT (NDAT)   ! (I)  Z coordinates of input curve
      REAL  X (N), Y (N), ! (O)  X, Y, Z coordinates of output curve
     >      Z (N)
      REAL  WORK (*)      ! (S)  Work space - see usage above.
                          !         Dimension is  5 * NDAT + 6 * N.
      

C----------------------------------------------------------------------


C     Local Constants:
C     ----------------

      REAL       ONE, ZERO
      CHARACTER  TIGHT * 1
      PARAMETER (ONE   = 1.E0,
     >           ZERO  = 0.E0,
     >           TIGHT = 'M')  ! Monotonic fits


C     Local Variables:
C     ----------------

      INTEGER    I
      REAL       ALPHA, STOTAL


C     Procedures:
C     -----------

      EXTERNAL   ARBDIS, CHORDS3D, FD12K, LCSFIT


C     Execution:
C     ----------

      IF ((EXPONENT .LT. ZERO) .OR. (EXPONENT .GT. ONE)) THEN
         ERRMSG = ' EXPONENT is outside allowable range of [0., 1.]'
         IER = 1
         GO TO 999
      END IF

      ERRMSG = '@@@@@@ failed.  IER = XXXX'


C     Compute the cumulative chord lengths of the input data:

      CALL CHORDS3D (NDAT, XDAT, YDAT, ZDAT, .FALSE., STOTAL,
     >               WORK (1))


C     Calculate the 2nd derivatives w.r.t. chord length:

      CALL FD12K (NDAT, WORK (1), XDAT, WORK (NDAT + 1), 
     >            WORK (2 * NDAT + 1), WORK (2 * NDAT + 1))

      CALL FD12K (NDAT, WORK (1), YDAT, WORK (NDAT + 1), 
     >            WORK (3 * NDAT + 1), WORK (3 * NDAT + 1))

      CALL FD12K (NDAT, WORK (1), ZDAT, WORK (NDAT + 1), 
     >            WORK (4 * NDAT + 1), WORK (4 * NDAT + 1))

 
C     Local curvature magnitudes:

      DO 100 I = 1, NDAT
         WORK (NDAT + I) = SQRT (WORK (2 * NDAT + I) ** 2 +
     >                           WORK (3 * NDAT + I) ** 2 +
     >                           WORK (4 * NDAT + I) ** 2)
  100 CONTINUE

C     Moderate the curvature shape function:

      ALPHA = ONE
      DO 200 I = 1, NDAT
         WORK (NDAT + I) = (WORK (NDAT + I) + ALPHA) ** (-EXPONENT)
  200 CONTINUE

C     Redistribute the arc lengths based on the shape function:

      CALL ARBDIS (N, ZERO, STOTAL, NDAT, WORK (1), WORK (NDAT + 1),
     >             'A', LUNOUT, WORK (2 * NDAT + N + 1),
     >             WORK (2 * NDAT + 1), IER)

      IF (IER .NE. 0) THEN
         ERRMSG (1 : 6) = 'ARBDIS'
         GO TO 910
      END IF


C     Determine the new x-y-z coordinates corresponding to the
C        redistributed chord lengths.  (PLSCURVE would be slightly
C        more efficient, but is more cumbersome.)

      CALL LCSFIT (NDAT, WORK (1), XDAT, .TRUE., TIGHT, N,
     >             WORK (2 * NDAT + 1), X, X)

      CALL LCSFIT (NDAT, WORK (1), YDAT, .TRUE., TIGHT, N,
     >             WORK (2 * NDAT + 1), Y, Y)

      CALL LCSFIT (NDAT, WORK (1), ZDAT, .TRUE., TIGHT, N,
     >             WORK (2 * NDAT + 1), Z, Z)

      GO TO 999


C     Error handling:
C     ---------------

  910 WRITE (ERRMSG (22 : 25), '(I4)') IER
      IER = 2

  999 RETURN
      END      
